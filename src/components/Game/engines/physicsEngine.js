// eslint-disable-next-line no-unused-vars
class PhysicsEngine {
    constructor({ gravity }) {
        this._gravity = gravity;
    }

    update(entity, delta) {
        if (entity.falling) {
            entity.speed += this._gravity * delta;
            entity.y += entity.speed * delta;
        }
    }
}

// Мы берем разницу м/у двумя последовательными запусками анимации
// Это время на каждом ПК свое, на производительном оно меньше (т.е. быстрее происходит)
// Именно поэтому нужно брать именно это время и замедлять его (например в тысячу раз - именно его делим)
// Т.к. если мы просто возьмем и поделим на 1000 результат расчета координат, то это будет не то - мы получим либо очень быстрое изменение,
// либо очень медленное - мы не попадем так в нужное значение

// Например (если разница 17 мс, то при делении будет 0,017 и домнажать выше координату нужно на небольшое число - на 0,017)
// т.е. ПК мощный и мы домнажаем на более маленькое число чтобы замедлить сильнее
// Если разница 50мс (комп менее производительный), то домнажать нужно уже на 0,05, т.е. на большее число - чтобы замедлить не так сильно

// Этот расчет влияет не на скорость анимации и кол-во кадров в секунду (т.е. мы тут не пропускаем кадры для отрисовки), а
// влияет на скорость изменения координаты (т.е. либо она на большее значение изменяется за один раз, либо на меньшее)
// На менее производительных ПК координата изменяется на большее значение (умножаем на 0,05), чтобы сдвигалась птичка на большее рассточние (т.е. быстрее)
